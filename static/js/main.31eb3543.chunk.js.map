{"version":3,"sources":["components/Navbar.jsx","components/Clock.jsx","components/Controls.jsx","components/Timer.jsx","components/CountdownForm.jsx","components/Countdown.jsx","components/Main.jsx","components/App.jsx","index.js"],"names":["Navbar","react_default","a","createElement","className","NavLink","exact","activeClassName","to","Component","Clock","seconds","min","Math","floor","sec","id","this","props","formatSeconds","Controls","newStatus","onStatusChange","_this","timerStatus","type","ref","onClick","Timer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleStatusChange","bind","assertThisInitialized","handleStart","prevProps","prevState","clearInterval","timer","undefined","setState","_this2","setInterval","_this$state","components_Clock","components_Controls","CountdownForm","e","preventDefault","refs","totalSeconds","value","length","alert","search","onFormSubmit","focus","onSubmit","placeholder","Countdown","countdown","handleFormSubmit","currStatus","handleStartCountdown","secondsRemaining","_this3","components_CountdownForm","Main","Switch","Route","path","component","App","Fragment","components_Navbar","components_Main","ReactDOM","render","BrowserRouter","basename","process","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.31eb3543.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './../style/Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n    render() { \r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg bg-dark\">\r\n                <span className=\"navbar-brand\">ReactTimer</span>\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <i className=\"arrow\"></i>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/\" className=\"nav-link\">Timer</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <i className=\"arrow\"></i>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/countdown\" className=\"nav-link\">Countdown</NavLink>\r\n                    </li>\r\n                </ul>               \r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './../style/Clock.css';\r\n\r\nclass Clock extends Component {\r\n    formatSeconds(seconds){\r\n\r\n        let min = Math.floor(seconds/60);\r\n        let sec = seconds % 60;\r\n\r\n        if(min < 10){\r\n            min = \"0\" + min;\r\n        }\r\n        if(sec < 10){\r\n            sec = \"0\" + sec;\r\n        }\r\n\r\n        return <span id=\"clock-text\">{min}:{sec}</span>\r\n    }\r\n    render() { \r\n        var {seconds} = this.props;\r\n        return ( \r\n            <div className=\"clock-container\">\r\n                <div className=\"clock mx-auto\">\r\n                    {this.formatSeconds(seconds)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React, { Component } from 'react';\r\nimport './../style/Controls.css';\r\n\r\nclass Controls extends Component {\r\n    onStatusChange(newStatus){\r\n        this.props.onStatusChange(newStatus);\r\n    }\r\n    render() { \r\n        var {timerStatus} = this.props;\r\n\r\n        // will render either start or pause button depending on status of program\r\n        var renderingStartStop = () => {\r\n            if(timerStatus === 'started'){\r\n                return <button type=\"button\" ref=\"buttons\" className=\"btn btn-secondary\" onClick={() => this.onStatusChange('paused')}>Pause</button>\r\n            }else{\r\n                return <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.onStatusChange('started')}>Start</button>\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div id=\"controls\">\r\n                {renderingStartStop()}\r\n                <button type=\"button\" className=\"btn btn-outline-danger\" onClick={() => this.onStatusChange('stopped')}>Clear</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controls;","import React, { Component } from 'react';\r\nimport './../style/main.css';\r\nimport Clock from './Clock';\r\nimport Controls from './Controls';\r\n\r\nclass Timer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            seconds: 0,\r\n            timerStatus: 'stopped'\r\n        }\r\n        this.handleStatusChange = this.handleStatusChange.bind(this);\r\n        this.handleStart = this.handleStart.bind(this);\r\n    }\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.timerStatus !== prevState.timerStatus){\r\n            switch (this.state.timerStatus){\r\n                case 'started':\r\n                    this.handleStart();\r\n                    break;\r\n                case 'paused':\r\n                    clearInterval(this.timer);\r\n                    this.timer = undefined;\r\n                    break;\r\n                case 'stopped':\r\n                    this.setState({\r\n                        seconds: 0\r\n                    })\r\n                    clearInterval(this.timer);\r\n                    this.timer = undefined;\r\n                    break;\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n    handleStatusChange(newStatus){\r\n        this.setState({timerStatus: newStatus});\r\n    }\r\n    handleStart(){\r\n        this.timer = setInterval(() => {\r\n            this.setState({\r\n                seconds: this.state.seconds + 1\r\n            })\r\n        }, 1000);\r\n    }\r\n    render() {\r\n        var {seconds, timerStatus} = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <h2 className=\"text-center font-weight-bold\">Timer App</h2>\r\n                <Clock seconds={seconds}/>\r\n                <Controls timerStatus={timerStatus} onStatusChange={this.handleStatusChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport './../style/CountdownForm.css';\r\n\r\nclass CountdownForm extends Component {\r\n    onFormSubmit(e){\r\n        e.preventDefault();\r\n        var seconds = this.refs.totalSeconds.value;\r\n    \r\n        // Test only numbers are used in the input field and \r\n        // input field cannot be empty\r\n        if(seconds.length < 1){\r\n            alert('Input field cannot be empty');\r\n        } else if (seconds.search(/^[0-9]*$/) < 0){\r\n            alert('Invalid Input: only numbers can be input');\r\n        } else{\r\n            this.props.onFormSubmit(seconds);\r\n        }\r\n        this.refs.totalSeconds.value = '';\r\n        this.refs.totalSeconds.focus();\r\n\r\n    }\r\n    render() { \r\n        return (\r\n            <form className=\"form-group mx-auto\" onSubmit={(e)=>this.onFormSubmit(e)}>\r\n                <input type=\"text\" className=\"form-control text-center\" ref=\"totalSeconds\" placeholder=\"Enter Countdown in seconds\"/>\r\n                <button className=\"btn btn-primary btn-block\">Start</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountdownForm;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Clock from './Clock';\r\nimport Controls from './Controls';\r\nimport CountdownForm from './CountdownForm';\r\nimport './../style/main.css';\r\n\r\nclass Countdown extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            countdown: 0,\r\n            timerStatus: 'stopped'\r\n        }\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n        this.handleStatusChange = this.handleStatusChange.bind(this);\r\n    }\r\n    componentDidUpdate(prevProps, prevState){\r\n        let currStatus = this.state.timerStatus;\r\n        let prevStatus = prevState.timerStatus;\r\n\r\n        if(currStatus !== prevStatus){\r\n            switch(currStatus){\r\n                case 'started':\r\n                    this.handleStartCountdown();\r\n                    break;\r\n                case 'stopped':\r\n                    this.setState({\r\n                        countdown: 0\r\n                    })\r\n                    clearInterval(this.timer);\r\n                    this.timer = undefined;\r\n                    break;\r\n                case 'paused':\r\n                    clearInterval(this.timer);\r\n                    this.timer = undefined;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n    handleStartCountdown(){\r\n        this.timer = setInterval(() => {\r\n            var secondsRemaining = this.state.countdown - 1;\r\n            this.setState({\r\n                countdown: secondsRemaining > 0 ? secondsRemaining : 0\r\n            })\r\n            if(secondsRemaining === 0){\r\n                this.setState({timerStatus: 'stopped'})\r\n            }\r\n        }, 1000);\r\n    }\r\n    handleFormSubmit(totalSeconds){\r\n        this.setState({\r\n            countdown: totalSeconds,\r\n            timerStatus: 'submitted'\r\n        });\r\n    }\r\n    handleStatusChange(newStatus){\r\n        this.setState({timerStatus: newStatus});\r\n    }\r\n    render() { \r\n        var {countdown, timerStatus} = this.state;\r\n\r\n        var renderControls = () => {\r\n            if(timerStatus === 'stopped'){\r\n                return <CountdownForm onFormSubmit={this.handleFormSubmit}/>\r\n            } else if(timerStatus === 'submitted'){\r\n                return <Controls timerStatus='stopped' onStatusChange={this.handleStatusChange}/>\r\n            } else{\r\n                return <Controls timerStatus={timerStatus} onStatusChange={this.handleStatusChange}/>\r\n            }\r\n        };\r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <h2 className=\"text-center font-weight-bold\" id=\"page-title\">Countdown App</h2>\r\n                <Clock seconds={countdown}/>\r\n                {renderControls()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Countdown;","import React, { Component } from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\n// Component Imports\r\nimport Timer from './Timer';\r\nimport Countdown from './Countdown';\r\n\r\nclass Main extends Component {\r\n    render() { \r\n        return (\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Timer}/>\r\n                <Route exact path=\"/countdown\" component={Countdown}/>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main';\r\n\r\nclass App extends Component {\r\n    render() { \r\n        return (\r\n            <React.Fragment>\r\n                <Navbar/>\r\n                <Main/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <App/>\r\n    </Router>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}